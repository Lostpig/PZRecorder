@using Data;
@using Services;

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h5">@daily.Name</MudText>
        <MudText Typo="Typo.h6" Style="color: var(--mud-palette-text-secondary);">@daily.Alias</MudText>
        <MudDivider/>
        <MudText>@((MarkupString)dateText)</MudText>
        <MudText>@((MarkupString)checkinText)</MudText>
        <div class="mt-6">
            <MudToolBar Class="mud-elevation-2">
                <MudIconButton Icon="@Icons.Material.Filled.ArrowLeft" OnClick="() => OnYearChanged(-1)"></MudIconButton>
                <MudSpacer />
                <MudText Class="ta-c">@year</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.ArrowRight" OnClick="() => OnYearChanged(1)"></MudIconButton>
            </MudToolBar>
            <MudText>@((MarkupString)yearText)</MudText>
            <div class="daily-statistic-container">
                @{ var d = yearFirstDay; }
                @while(d.Year == year)
                {
                    int month = d.Month;
                    <div class="daily-statistic">
                        <div class="month-text">@d.ToString("MM")</div>
                        @while (d.Month == month)
                        {
                            string date = d.ToString("yyyy-MM-dd") + " " + Helper.WeekdayName(d.DayOfWeek, false);
                            string cls = dailyDatas[d.DayOfYear - 1] == 1 ? "checkin" : dailyDatas[d.DayOfYear - 1] == 2 ? "notcheck" : "unknown";
                            <MudTooltip Text="@date">
                                <div class="@("item " + cls)"></div>
                            </MudTooltip>

                            d = d.AddDays(1);
                        }
                    </div>
                }
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Cancel">@LD.Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
	[CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public int DailyId { get; set; }
    private Daily daily;
    IList<DailyWeek> datas;

    private int year = 2024;
    private int[] dailyDatas;
    private DateOnly yearFirstDay;

    private DateOnly firsyCheckDay;
	private DateOnly lastCheckDay;

    private string dateText = "";
    private string checkinText = "";
    private string yearText = "";

    void Cancel() => MudDialog.Cancel();

    private void OnYearChanged(int add)
    {
        year = year + add;
        UpdateYearDailyData();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        year = DateTime.Today.Year;
        daily = DailyService.GetDaily(DailyId);
        datas = DailyService.GetDailyDatas(daily.Id);

        int checkinCount = 0;
        int firstDayNum = 0;
        int lastDayNum = 0;

        foreach(var dw in datas)
        {
            for (int d = 1; d <= 7; d++)
            {
                DayOfWeek dayOfWeek = d == 7 ? DayOfWeek.Sunday : (DayOfWeek)d;
                int dayNum = dw.MondayDay + d - 1;

                if (dw[dayOfWeek] != 0)
                {
                    if (dw[dayOfWeek] == 1) checkinCount++;
                    if (dayNum < firstDayNum || firstDayNum == 0) firstDayNum = dayNum;
                    if (dayNum > lastDayNum || firstDayNum == 0) lastDayNum = dayNum;
                }
            }
        }

        if (checkinCount > 0)
        {
            firsyCheckDay = DateOnly.FromDayNumber(firstDayNum);
            lastCheckDay = DateOnly.FromDayNumber(lastDayNum);
            int totalDays = lastDayNum - firstDayNum + 1;
            double checkinPrec = (double)checkinCount / totalDays * 100.0;

            dateText = String.Format(
                LD.StatisticTextDate, 
                $"<span style=\"color: var(--mud-palette-info);\">{firsyCheckDay.ToString("yyyy-MM-dd")}</span>",
                $"<span style=\"color: var(--mud-palette-info);\">{lastCheckDay.ToString("yyyy-MM-dd")}</span>"
            );
            checkinText = string.Format(LD.StatisticTextCount, 
                $"<span style=\"color: var(--mud-palette-info);\">{totalDays}</span>",
                $"<span style=\"color: var(--mud-palette-info);\">{checkinCount}</span>",
                $"<span style=\"color: var(--mud-palette-info);\">{checkinPrec.ToString("F2")}</span>"
            );
        } 
        else
        {
            dateText = LD.NoStatisticData;
        }

        UpdateYearDailyData();
    }
    private void UpdateYearDailyData()
    {
        yearFirstDay = new DateOnly(year, 1, 1);
        DateOnly yearLastDay = new DateOnly(year, 12, 31);

        dailyDatas = new int[yearLastDay.DayOfYear];
        for (int i = 0; i < dailyDatas.Length; i++)
        {
            dailyDatas[i] = 0;
        }

        int checkinDays = 0;
        foreach (var dw in datas)
        {
            for(int d = 1; d <= 7; d++)
            {
                DayOfWeek dayOfWeek = d == 7 ? DayOfWeek.Sunday : (DayOfWeek)d;
                int dayNum = dw.MondayDay + d - 1;

                int diff = dayNum - yearFirstDay.DayNumber;
                if (diff >= 0 && diff < dailyDatas.Length)
                {
                    dailyDatas[diff] = dw[dayOfWeek];
                    if (dailyDatas[diff] == 1) checkinDays++;
                }
            }
        }

		var factFirstDay = yearFirstDay > firsyCheckDay ? yearFirstDay : firsyCheckDay;
		var factLastDay = yearLastDay < lastCheckDay ? yearLastDay : lastCheckDay;

		int totalDays = factLastDay.DayNumber - factFirstDay.DayNumber + 1;
        double checkinPrec = (double)checkinDays / totalDays * 100.0;
        yearText = String.Format(
            LD.StatisticTextYear,
            year,
            $"<span style=\"color: var(--mud-palette-info);\">{checkinDays}</span>",
            $"<span style=\"color: var(--mud-palette-info);\">{totalDays}</span>",
            $"<span style=\"color: var(--mud-palette-info);\">{checkinPrec.ToString("F2")}</span>"
        );
    }
}
