@using Services;

<MudThemeProvider @ref="@_mudThemeProvider" Theme="_theme" IsDarkMode="darkMode" />
<MudPopoverProvider />
<MudDialogProvider FullWidth="true"
    MaxWidth="MaxWidth.Large"
    CloseButton="false"
    BackdropClick="false"
    Position="DialogPosition.TopCenter"
    CloseOnEscapeKey="true" />

<MudLayout>
    <MudDrawer @bind-Open="@DrawOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">PZ Recorder</MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Checklist" Href="/records">@LD.Record</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dataset" Href="/kind-manager">@LD.KindManager</MudNavLink>
            <MudDivider Class="my-4" />
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.CalendarMonth" Href="/daily-week">@LD.Daily</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.EditCalendar" Href="/daily-manager">@LD.DailyManager</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.MonitorHeart" Href="/process-watch">@LD.ProcessWatcher</MudNavLink>
            <MudDivider Class="my-4" />
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.History" Href="/clock-in">
                <span class="remind @remindShow">@LD.ClockIn</span>
            </MudNavLink>
            <MudDivider Class="my-4" />
            <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Settings" Href="/setting">@LD.Setting</MudNavLink>
            <MudNavLink Icon="@Icons.Material.Filled.ExitToApp" OnClick="OnExitClick">@LD.Exit</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Style="padding-top: 0; height: 100%; background-color: var(--mud-palette-background-grey);">
        <Router AppAssembly="typeof(Program).Assembly">
            <Found Context="routeData" >
                <RouteView RouteData="routeData"/>
            </Found>
            <NotFound>
                <div class="content">
                    <h1>PAGE NOT FOUND</h1>
                    <p>
                        The page you have requested could not be found. <a href="/">Return to the home page.</a>
                    </p>
                </div>
            </NotFound>
        </Router>
    </MudMainContent>
</MudLayout>

@code {
    [Inject] private IDialogService DialogService { get; set; } = default!;
    private MudThemeProvider _mudThemeProvider = default!;
    private MudTheme _theme = new();
    bool DrawOpen = true;
    bool darkMode = true;
    string remindShow = "";

    private void OnExitClick()
    {
        Application.Exit();
    }

    private async Task SetTheme(string theme)
    {
        if (theme == "system")
        {
            darkMode = await _mudThemeProvider.GetSystemDarkModeAsync();
        }
        else
        {
            darkMode = theme == "dark";
        }

        StateHasChanged();
    }
    private void SetClockInRemind()
    {
        remindShow = ClockInService.CheckReminds() ? "remind-show" : "";
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        BroadcastService.RegisterReceiver((ev, arg) =>
        {
            switch (ev)
            {
                case BroadcastEvent.ExceptionCatch:
                    DialogService.ShowError(arg);
                    break;
                case BroadcastEvent.LanguageChanged:
                    StateHasChanged();
                    break;
                case BroadcastEvent.ThemeChanged:
                    _ = SetTheme(arg);
                    break;
                case BroadcastEvent.RemindStateChanged:
                case BroadcastEvent.DateChanged:
                    SetClockInRemind();
                    break;
                default: 
                    break;
            }
        });

        SetClockInRemind();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string theme = VariantService.GetVariant("theme") ?? "dark";
            await SetTheme(theme);
        }
    }
}
