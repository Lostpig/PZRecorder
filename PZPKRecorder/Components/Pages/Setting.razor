@page "/setting";

@using Services;

<MudPaper Width="100%" Height="100%" class="pa-4">
    <MudTextField ReadOnly="true" Value="@DBVersion" Label="DB Version" Variant="Variant.Text" Class="mb-4" />
    <MudSelect T="string" @bind-Value="language" @bind-Value:after="OnLanguageChanged" Label="@LD.Language" Class="mb-4">
        @foreach(var l in languages)
        {
            <MudSelectItem Value="l.Value">@l.Name</MudSelectItem>
        }
    </MudSelect>
    <MudSelect T="string" @bind-Value="theme" @bind-Value:after="OnThemeChanged" Label="@LD.Theme" Class="mb-4">
        <MudSelectItem Value="@("dark")">@LD.Dark</MudSelectItem>
        <MudSelectItem Value="@("light")">@LD.Light</MudSelectItem>
        <MudSelectItem Value="@("system")">@LD.System</MudSelectItem>
    </MudSelect>
    <MudDivider Class="my-2" />
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ImportExport" Color="Color.Tertiary" OnClick="OnImportClick">@LD.Import</MudButton>
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ImportExport" Color="Color.Primary" OnClick="OnExportClick">@LD.Export</MudButton>
</MudPaper>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private int DBVersion = 0;
    private string language;
    private IList<LanguageItem> languages;
    private string theme = "dark";

    private void OnLanguageChanged()
    {
        Translate.ChangeLanguage(language);
    }
    private void OnThemeChanged()
    {
        VariantService.SetVariant("theme", theme);
        BroadcastService.Broadcast(BroadcastEvent.ThemeChanged, theme);
    }

    private async void OnExportClick()
    {
        try
        {
            string? filepath = ExportService.Export(false);
            if (filepath != null)
            {
                bool ok = await DialogService.ShowConfirm(LD.ExportSuccess, LD.OpenFolder, LD.Close);
                if (ok)
                {
                    Helper.OpenFolder(filepath);
                }
            }
        }
        catch(Exception ex)
        {
            ExceptionProxy.CatchException(ex);
        }
    }

    private async void OnImportClick()
    {
        bool ok = await DialogService.ShowConfirm(LD.ImportConfirmMessage);
        if (ok != true) return;

        try
        {
            ImportService.Import();
            await DialogService.ShowAlert(LD.ImportSuccess);
        }
        catch (Exception ex)
        {
            ExceptionProxy.CatchException(ex);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        language = Translate.Current;
        languages = Translate.Languages;

        string? dbver = VariantService.GetVariant(SqlLiteHandler.DBVersionKey);
        DBVersion = int.Parse(dbver ?? "0");

        theme = VariantService.GetVariant("theme") ?? "dark";
    }
}
