@page "/records";

@using Services;
@using Data;
@using Dialogs;

<div class="d-flex flex-column" style="height: 100%; width: 100%; min-width: 1080px; position: relative; background-color: var(--mud-palette-background-grey);">
    @if (disable)
    {
        <MudText Color="Color.Error">@LD.NoKindsError</MudText>
    }
    else
    {
        <MudTabs Elevation="2" Rounded="true" @bind-ActivePanelIndex="kindIndex" @bind-ActivePanelIndex:after="OnKindChange">
            @foreach (var kind in kinds)
            {
                <MudTabPanel Text="@kind.Name" ID="@kind.Id" />
            }
        </MudTabs>

        <div class="records-container">
            <div class="records-tool-panel pa-3">
                <MudPaper Elevation="2" Class="pa-2" >
                    <MudTextField T="string" @bind-Value="records.SearchText" Placeholder="@LD.Search" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    <MudText Typo="Typo.h6" Class="mt-4">@LD.State</MudText>
                    <div>
                        <MudChip Variant="Variant.Filled" OnClick="() => OnStateChange(RecordState.Wish)" Size="Size.Medium"
                                 Color="@(records.State == RecordState.Wish ? Color.Primary : Color.Default)">@kind.GetStateName(RecordState.Wish)</MudChip>
                        <MudChip Variant="Variant.Filled" OnClick="() => OnStateChange(RecordState.Doing)" Size="Size.Medium"
                                 Color="@(records.State == RecordState.Doing ? Color.Primary : Color.Default)">@kind.GetStateName(RecordState.Doing)</MudChip>
                        <MudChip Variant="Variant.Filled" OnClick="() => OnStateChange(RecordState.Complete)" Size="Size.Medium"
                                 Color="@(records.State == RecordState.Complete ? Color.Primary : Color.Default)">@kind.GetStateName(RecordState.Complete)</MudChip>
                        <MudChip Variant="Variant.Filled" OnClick="() => OnStateChange(RecordState.Giveup)" Size="Size.Medium"
                                 Color="@(records.State == RecordState.Giveup ? Color.Primary : Color.Default)">@kind.GetStateName(RecordState.Giveup)</MudChip>
                    </div>
                    <MudDivider Class="my-2" />
                    <MudSelect T="int" Label="@LD.PublishYear" AnchorOrigin="Origin.BottomCenter" @bind-Value="records.Year">
                        <MudSelectItem T="int" Value="0">-</MudSelectItem>
                        @foreach (var y in records.Years)
                        {
                            <MudSelectItem T="int" Value="@y" />
                        }
                    </MudSelect>
                    <MudSelect T="int" Label="@LD.PublishMonth" Class="mb-4" AnchorOrigin="Origin.BottomCenter" @bind-Value="records.Month">
                        <MudSelectItem T="int" Value="0">-</MudSelectItem>
                        @foreach (var m in records.Months)
                        {
                            <MudSelectItem T="int" Value="@m" />
                        }
                    </MudSelect>
                </MudPaper>
                <MudButton Variant="Variant.Outlined"
                           StartIcon="@Icons.Material.Filled.Add"
                           Color="Color.Primary"
                           Style="text-transform:none"
                           Class="mt-4"
                           OnClick="OnAddClick">@LD.Add</MudButton>
            </div>
            <div class="records-list pa-3">
                @if (records.Total == 0)
                {
                    <div class="no-data-container">
                        <MudText Color="Color.Error">@LD.NoData</MudText>
                    </div>
                }
                @foreach(var record in records.Items)
                {
                    MudBlazor.Color stateColor = record.State switch
                    {
                        RecordState.Wish => Color.Warning,
                        RecordState.Doing => Color.Primary,
                        RecordState.Giveup => Color.Secondary,
                        RecordState.Complete => Color.Success,
                        _ => Color.Default
                    };
                    <MudCard Elevation="2" Class="pl-4 pr-2 py-2 d-flex flex-row mb-4">
                        <div class="flex-1">
                            <div>
                                <MudText Typo="Typo.h6" Class="flex-1" Inline="true" Color="Color.Info">@record.Name</MudText>
                                <MudText Typo="Typo.subtitle1" Class="flex-1" Inline="true" Style="color: var(--mud-palette-text-secondary);">@record.Alias</MudText>
                            </div>
                            <div class="mt-2">
                                <MudText Typo="Typo.body1" Class="mr-4" Inline="true">@record.Episode / @record.EpisodeCount</MudText>
                                <MudText Typo="Typo.body1" Class="ml-4" Inline="true">@record.PublishYear-@record.PublishMonth</MudText>
                                <MudText Typo="Typo.body1" Class="fl-r" Inline="true">@record.ModifyDate.ToString("yyyy-MM-dd HH:mm")</MudText>
                            </div>
                            <MudText Typo="Typo.body2" Class="mt-4" Style="color: var(--mud-palette-text-secondary);">@record.Remark</MudText>
                        </div>
                        <MudDivider Vertical="true" FlexItem="true" Class="mx-2" />
                        <MudStack Row="false">
                            <MudText Color="stateColor" Typo="Typo.body1" Style="text-align: center;">@kind.GetStateName(record.State)</MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" aria-label="@LD.Edit" OnClick="() => OnEditClick(record.Id)"></MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="@LD.Delete" OnClick="() => OnDeleteClick(record.Id)"></MudIconButton>
                        </MudStack>
                    </MudCard>
                }
                <div class="d-flex flex-row align-center">
                    <MudPagination @bind-Selected="records.Page"
                                   ShowFirstButton="true" ShowLastButton="true"
                                   Count="records.PageCount"
                                   Class="pa-4 flex-1" />
                    <MudText>@records.From - @records.To / @records.Total</MudText>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    private bool disable = false;

    private IList<Kind> kinds = new List<Kind>();
    private int kindIndex = 0;
    private Kind kind => kinds[kindIndex];
    private RecordCollection records;
    private RecordState? defaultState;

    private void OnStateChange(RecordState r)
    {
        if (records.State == r) records.State = null;
        else records.State = r;

        VariantService.SetVariant("RecordState", records.State == null ? "" : ((int)r).ToString());
    }
    private void OnKindChange()
    {
        LoadRecords();
    }

    private void LoadRecords()
    {
        RecordState? setedState = null;
        string? setedSearchText = null;
        if (records == null)
        {
            setedState = defaultState;
        }
        else
        {
            setedState = records.State;
            setedSearchText = records.SearchText;
        }

        records = RecordCollection.GetCollection(kinds[kindIndex]);
        records.SearchText = setedSearchText != null ? setedSearchText : "";
        records.State = setedState;
    }

    private async void OnAddClick()
    {
        int kindId = kinds[kindIndex].Id;

        DialogParameters<RecordDialog> paramters = new();
        paramters.Add(d => d.IsEdit, false);
        paramters.Add(d => d.RecordId, -1);
        paramters.Add(d => d.KindId, kindId);

        var dialog = await DialogService.ShowAsync<RecordDialog>(LD.AddRecord, paramters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            records.NewRecord((Record)result.Data);
            StateHasChanged();
        }
    }
    private async void OnEditClick(int id)
    {
        int kindId = kinds[kindIndex].Id;

        DialogParameters<RecordDialog> paramters = new();
        paramters.Add(d => d.IsEdit, true);
        paramters.Add(d => d.RecordId, id);
        paramters.Add(d => d.KindId, kindId);

        var dialog = await DialogService.ShowAsync<RecordDialog>(LD.EditRecord, paramters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            records.UpdateRecord((Record)result.Data);
            StateHasChanged();
        }
    }
    private async void OnDeleteClick(int id)
    {
        bool result = await DialogService.ShowConfirm(LD.SureToDelete, LD.Delete, LD.Cancel);
        if (result == true)
        {
            try
            {
                RecordService.DeleteRecord(id);
                records.DeleteRecord(id);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await DialogService.ShowError(ex.Message);
            }
        }
    }

    protected override void OnInitialized()
    {
        kinds = KindService.GetKinds();
        if (kinds.Count == 0)
        {
            disable = true;
            return;
        }

        var recordState = VariantService.GetVariant("RecordState");
        if (!string.IsNullOrEmpty(recordState) && int.TryParse(recordState, out int stateCode))
        {
            defaultState = (RecordState)stateCode;
        }

        LoadRecords();
    }
}
